version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streaming_postgres
    environment:
      POSTGRES_DB: streaming_db
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: streaming_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - streaming_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streaming_user -d streaming_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: streaming_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - streaming_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TURN Server (for WebRTC NAT traversal)
  coturn:
    image: coturn/coturn:latest
    container_name: streaming_coturn
    command: >
      -n
      --log-file=stdout
      --min-port=49152
      --max-port=65535
      --fingerprint
      --lt-cred-mech
      --realm=streaming.local
      --server-name=streaming.local
      --static-auth-secret=your-coturn-secret
      --total-quota=100
      --user-quota=50
      --max-bps=1000000
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "49152-65535:49152-65535/udp"
    networks:
      - streaming_network
    restart: unless-stopped

  # Streaming Server
  streaming-server:
    build: .
    container_name: streaming_server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - ROCKET_PROFILE=production
      - DATABASE_URL=postgresql://streaming_user:streaming_password@postgres:5432/streaming_db
    volumes:
      - streaming_data:/data/streaming
      - streaming_temp:/tmp/streaming
      - streaming_hls:/tmp/streaming/hls
      - ./config.toml:/app/config.toml:ro
    ports:
      - "8080:8080"     # HTTP API
      - "1935:1935"     # RTMP
      - "30000-40000:30000-40000/udp"  # Multicast range
    networks:
      - streaming_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: streaming_nginx
    depends_on:
      - streaming-server
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - streaming_hls:/var/www/hls:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - streaming_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: streaming_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - streaming_network
    restart: unless-stopped

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: streaming_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - streaming_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  streaming_data:
    driver: local
  streaming_temp:
    driver: local
  streaming_hls:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  streaming_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16